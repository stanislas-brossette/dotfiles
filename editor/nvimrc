" ============================================================================
" .nvimrc of stanislas brossette
" ============================================================================

" Environment 
" Identify platform
silent function! OSX()
  return has('macunix')
endfunction
silent function! LINUX()
  return has('unix') && !has('macunix') && !has('win32unix')
endfunction
silent function! WINDOWS()
  return (has('win16') || has('win32') || has('win64'))
endfunction

" Paths
let s:nvim_dir = expand("~/.config/nvim/")
let s:plugin_dir = s:nvim_dir . "plugged/"

" Use plugins config 
let s:plugins_script = s:nvim_dir . 'plugins.vim'
if filereadable(s:plugins_script)
  exec "source " . s:plugins_script
endif


" set leader keys
let mapleader = "\<Space>"
let maplocalleader = ','

"""""""""""""""""""
"  BASIC OPTIONS  "
"""""""""""""""""""

set background=dark

" set UTF-8 encoding
set enc=utf-8
set fenc=utf-8
set termencoding=utf-8
set encoding=utf-8

" configure tabwidth and insert spaces instead of tabs
set tabstop=2        " tab width is 2 spaces
set shiftwidth=2     " indent also with 2 spaces
set expandtab        " expand tabs to spaces

" this turns off physical line wrapping (ie: automatic insertion of newlines)
set textwidth=0 wrapmargin=0
set wrap linebreak nolist

" use indentation of previous line
set autoindent
" use intelligent indentation for c
set smartindent

" turn syntax highlighting on
set t_Co=256
syntax on
"color"
" let g:hybrid_use_Xresources = 1
colorscheme hybrid
" Fix cursor in search for hybrid
hi Cursor ctermfg=16 ctermbg=253

" Recognize .tex files as LaTeX
let g:tex_flavor='latex'

" Affiche la position du curseur 'ligne,colonne'
"set ruler

" Highlight current line
"set cursorline

" Affiche une barre de status en bas de l'écran
set laststatus=2

" Contenu de la barre de status
set statusline=%<%f%h%m%r%=%l,%c\ %P
" Autorise le passage d'une ligne à l'autre avec les flèches gauche et droite
set whichwrap=<,>,h,l,[,]

" Command history length
set history=1000
" Always keep a visible line above cursor
set scrolloff=1
" Affiche les commandes dans la barre de status
set showcmd

" Les recherches ne sont pas 'case sensitives'
set ignorecase
" Searching starts after you enter the string
set incsearch
" Turns on search highlighting
set hlsearch

" enable persistant undo history
set undofile
" set a directory to store the undo history
set undodir=~/.vimundo/

"Store swap files in fixed location, not current directory.
set dir=~/dotfiles/.vimswap//,/var/tmp//,/tmp//,.

"set list displays all invisible characters
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<

"No auto fold on startup
"set foldlevelstart=99
set foldmethod=marker

" No swap files
set noswapfile

"Enable use of mouse cursor
set mouse=a


" System clipboard support
if has('clipboard')
 if has('unnamedplus') " When possible use + register for copy-paste
   set clipboard=unnamed,unnamedplus
 else " On mac and Windows, use * register for copy-paste
   set clipboard=unnamed
 endif
endif

" Disable Ex mode
nnoremap Q <nop>

"Filetype detection for indent and highlighting
filetype plugin indent on

"""""""""""""""
"  FUNCTIONS  "
"""""""""""""""

" Zoom / Restore window.
function! s:ZoomToggle() abort
 if exists('t:zoomed') && t:zoomed
   execute t:zoom_winrestcmd
   let t:zoomed = 0
 else
   let t:zoom_winrestcmd = winrestcmd()
   resize
   vertical resize
   let t:zoomed = 1
 endif
endfunction
command! ZoomToggle call s:ZoomToggle()


""""""""""""""
"  MAPPINGS  "
""""""""""""""

" Easy zooming
nnoremap <silent> <Leader><Leader> :ZoomToggle<CR>

" Press F3 to toggle highlighting on/off, and show current value.
noremap <F3> :set hlsearch! hlsearch?<CR>
" in normal mode F5 will save the file
nmap <F5> :w<CR>
" in insert mode F5 will exit insert, save, enters insert again
imap <F5> <ESC>:w<CR>i
" Reload vimrc
map <F6> :so ~/.nvimrc<CR>
" Press F8 to toggle set number on/off, and show current value.
noremap <F8> :set number! relativenumber! number?<CR>
" Display trailing characters
nnoremap <F9> :set list!<CR>
"Map NERDTree on current dir to <F12>
map <F12> :NERDTreeToggle<CR>

" Map Ctrl+k to clang-format in normal mode
map <C-K> :pyf /usr/share/vim/addons/syntax/clang-format-3.6.py<cr>
imap <C-K> <c-o>:pyf /usr/share/vim/addons/syntax/clang-format-3.6.py<cr>

tnoremap <A-h> <C-\><C-n><C-w>h
tnoremap <A-j> <C-\><C-n><C-w>j
tnoremap <A-k> <C-\><C-n><C-w>k
tnoremap <A-l> <C-\><C-n><C-w>l
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l

" Disable the arrow keys in normal mode
"map <up> :echoerr "Use hjkl instead of arrows!!!"<CR>
"map <down> :echoerr "Use hjkl instead of arrows!!!"<CR>
"map <left> :echoerr "Use hjkl instead of arrows!!!"<CR>
"map <right> :echoerr "Use hjkl instead of arrows!!!"<CR>

tnoremap <Esc><Esc> <C-\><C-n>
